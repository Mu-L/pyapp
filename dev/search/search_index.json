{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"PyApp","text":"CI/CD Docs Project Meta <p>PyApp is a wrapper for Python applications that bootstrap themselves at runtime.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Easily build standalone binaries for every platform</li> <li>Optional management commands providing functionality such as self updates</li> <li>Extremely configurable runtime behavior allowing for targeting of different end users</li> </ul>"},{"location":"#license","title":"License","text":"<p>PyApp is distributed under the terms of any of the following licenses:</p> <ul> <li>Apache-2.0</li> <li>MIT</li> </ul>"},{"location":"#navigation","title":"Navigation","text":"<p>Documentation for specific versions can be chosen by using the dropdown on the top of every page. The <code>dev</code> version reflects changes that have not yet been released.</p> <p>Desktop readers can use special keyboard shortcuts:</p> Keys Action <ul><li>, (comma)</li><li>p</li></ul> Navigate to the \"previous\" page <ul><li>. (period)</li><li>n</li></ul> Navigate to the \"next\" page <ul><li>/</li><li>s</li></ul> Display the search modal"},{"location":"build/","title":"Building","text":"<p>Before building your application, you must configure your project at the very least.</p> <p>After you have done that, your application can be built using a local copy of this repository or via installation with Cargo.</p> <p>Tip</p> <p>For a more streamlined workflow, consider using the built-in app build target of Hatch.</p>"},{"location":"build/#local-repository","title":"Local repository","text":"<p>The recommended method of downloading the repository is via the <code>source</code> asset archives attached to each release.</p> <p>The latest release can always be downloaded at the following URLs:</p> <ul> <li>https://github.com/ofek/pyapp/releases/latest/download/source.tar.gz</li> <li>https://github.com/ofek/pyapp/releases/latest/download/source.zip</li> </ul> <p>Specific releases may be downloaded at the following URLs, replacing <code>X.Y.Z</code> with the desired version:</p> <ul> <li>https://github.com/ofek/pyapp/releases/download/vX.Y.Z/source.tar.gz</li> <li>https://github.com/ofek/pyapp/releases/download/vX.Y.Z/source.zip</li> </ul> <p>After unpacking the repository, enter the directory and run:</p> <pre><code>cargo build --release\n</code></pre> <p>The executable will be located at <code>target/release/pyapp.exe</code> if on Windows or <code>target/release/pyapp</code> otherwise. If a particular target has been set (or when cross compiling since one will always be set), then the <code>release</code> directory will be nested one level deeper under <code>target/&lt;TARGET&gt;</code>.</p>"},{"location":"build/#installation","title":"Installation","text":"<p>Select the directory in which to build the executable with the <code>--root</code> option and run:</p> <pre><code>cargo install pyapp --force --root &lt;DIR&gt;\n</code></pre> <p>The executable will be located at <code>&lt;DIR&gt;/bin/pyapp.exe</code> if on Windows or <code>&lt;DIR&gt;/bin/pyapp</code> otherwise.</p> <p>Specific versions may be chosen with the <code>--version</code> flag.</p> <p>Note: If you want to cross compile, this method of building is currently unsupported.</p>"},{"location":"build/#cross-compilation","title":"Cross compilation","text":"<p>Configuration for cross is validated by CI to ensure all known environment variable options are passed through to the containers.</p> <p>When embedding the project or the distribution using a local path, you must use the local repository way of building and ensure that the configured files to embed reside within the repository and the options refer to relative paths.</p>"},{"location":"build/#caveats","title":"Caveats","text":"<p>Some targets like <code>powerpc64le-unknown-linux-gnu</code> need extra Cargo configuration to build properly. If there exists a file named <code>.cargo/config_&lt;TARGET&gt;.toml</code>, then you will need to build using the local repository way and rename that file to <code>.cargo/config.toml</code> before builds.</p>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"changelog/#unreleased","title":"Unreleased","text":""},{"location":"changelog/#0111-2023-09-14","title":"0.11.1 - 2023-09-14","text":"<p>Fixed:</p> <ul> <li>Fix the Python path for the <code>pypy2.7</code> distribution</li> </ul>"},{"location":"changelog/#0110-2023-09-07","title":"0.11.0 - 2023-09-07","text":"<p>Added:</p> <ul> <li>Update default distributions to 20230826</li> <li>Build releases with codegen-units=1</li> </ul>"},{"location":"changelog/#0101-2023-06-26","title":"0.10.1 - 2023-06-26","text":"<p>Fixed:</p> <ul> <li>Fix regression in the <code>PYAPP_EXEC_SPEC</code> option</li> </ul>"},{"location":"changelog/#0100-2023-06-26","title":"0.10.0 - 2023-06-26","text":"<p>Added:</p> <ul> <li>Add <code>PYAPP_EXEC_SCRIPT</code> option for executing a project using a script</li> <li>Add support for overriding the installation directory</li> <li>Make the <code>PYAPP_DISTRIBUTION_PATH</code> option implicitly enable <code>PYAPP_DISTRIBUTION_EMBED</code></li> </ul> <p>Fixed:</p> <ul> <li>Properly handle cases where options contain line feed characters</li> </ul>"},{"location":"changelog/#090-2023-06-21","title":"0.9.0 - 2023-06-21","text":"<p>Changed:</p> <ul> <li>Custom distributions should now define the relative path to the <code>site-packages</code> directory</li> </ul> <p>Added:</p> <ul> <li>Add support for PyPy distributions</li> <li>Add the <code>PYAPP_UPGRADE_VIRTUALENV</code> option to create virtual environments with <code>virtualenv</code> rather than the stdlib's <code>venv</code></li> <li>Add support for custom distributions with <code>bzip2</code> compression</li> </ul> <p>Fixed:</p> <ul> <li>Properly handle cases where temporary files are on different filesystems</li> <li>Fix regression in the <code>metadata</code> management command on Windows</li> <li>Improve error messages when running binaries that were misconfigured</li> </ul>"},{"location":"changelog/#080-2023-06-09","title":"0.8.0 - 2023-06-09","text":"<p>Added:</p> <ul> <li>Add the ability to externally manage pip with the <code>PYAPP_PIP_EXTERNAL</code> and <code>PYAPP_PIP_VERSION</code> options</li> <li>Allow for project installation with a dependency file using the <code>PYAPP_PROJECT_DEPENDENCY_FILE</code> option</li> <li>Add management command to directly invoke pip with the installed Python</li> <li>Add management command to output the path to the installed Python</li> </ul> <p>Fixed:</p> <ul> <li>Fix builds for PowerPC64</li> </ul>"},{"location":"changelog/#070-2023-05-24","title":"0.7.0 - 2023-05-24","text":"<p>Changed:</p> <ul> <li>Installations use virtual environments by default; the previous behavior can be enabled with the <code>PYAPP_FULL_ISOLATION</code> option</li> </ul> <p>Added:</p> <ul> <li>Update default CPython distributions</li> <li>Add <code>-r</code>/<code>--restore</code> flag to the <code>update</code> command</li> <li>Allow for disabling of management commands</li> <li>Add ability to expose optional commands</li> <li>Add optional command to directly invoke the installed Python</li> <li>Run Python in isolated mode</li> <li>Execute projects with <code>execvp</code> on non-Windows systems</li> <li>When the management command is enabled its name is available at runtime via an environment variable</li> <li>Add different installation wait message for when there is a guarantee of no side effects (e.g. pip's <code>--only-binary :all:</code>)</li> </ul>"},{"location":"changelog/#060-2023-05-16","title":"0.6.0 - 2023-05-16","text":"<p>Added:</p> <ul> <li>Add <code>PYAPP_PROJECT_PATH</code> option to embed the project for installation at runtime</li> <li>Add <code>PYAPP_DISTRIBUTION_PATH</code> option to embed the distribution from a local path rather than fetching the source</li> </ul> <p>Fixed:</p> <ul> <li>Properly handle distributions packed as ZIP files</li> </ul>"},{"location":"changelog/#050-2023-05-11","title":"0.5.0 - 2023-05-11","text":"<p>Added:</p> <ul> <li>Strip symbols from release builds</li> </ul> <p>Fixed:</p> <ul> <li>Properly pass through all required environment variable options to cross compilation images</li> <li>Properly allow configuration of the template used for the metadata command</li> </ul>"},{"location":"changelog/#040-2023-05-11","title":"0.4.0 - 2023-05-11","text":"<p>Changed:</p> <ul> <li>Rename <code>PYAPP_STARSHIP_PROMPT</code> option to <code>PYAPP_METADATA_TEMPLATE</code></li> </ul> <p>Added:</p> <ul> <li>Add <code>PYAPP_PIP_EXTRA_ARGS</code> option to provide extra <code>pip install</code> arguments</li> <li>Add <code>PYAPP_PIP_ALLOW_CONFIG</code> option to allow runtime configuration of <code>pip</code></li> <li>Add configuration for correct cross compilation</li> </ul>"},{"location":"changelog/#031-2023-05-10","title":"0.3.1 - 2023-05-10","text":"<p>Fixed:</p> <ul> <li>Fix default distribution detection for Linux on architectures other than x86_64</li> </ul>"},{"location":"changelog/#030-2023-05-10","title":"0.3.0 - 2023-05-10","text":"<p>Changed:</p> <ul> <li>Rename <code>PYAPP_DISTRIBUTION_COMPRESSION</code> option to <code>PYAPP_DISTRIBUTION_FORMAT</code></li> </ul> <p>Added:</p> <ul> <li>Add <code>--pre</code> flag to the <code>self update</code> command to allow pre-release and development versions</li> <li>Add environment variable for detection</li> <li>Add <code>PYAPP_SELF_COMMAND</code> option to control the name of the management command</li> <li>Add <code>PYAPP_SKIP_INSTALL</code> option to skip project installation</li> <li>Remove dependence on OpenSSL</li> </ul> <p>Fixed:</p> <ul> <li>Properly display error messages from <code>pip install</code> commands</li> <li>Fix project version reading for the metadata command on non-Windows systems</li> </ul>"},{"location":"changelog/#020-2023-05-07","title":"0.2.0 - 2023-05-07","text":"<p>This is the initial public release.</p>"},{"location":"config/","title":"Configuration","text":"<p>All configuration is done with environment variables.</p>"},{"location":"config/#project","title":"Project","text":"<p>There are 3 ways to configure runtime installation, none of which will occur when disabled.</p> <p>The project name and version must be known in all cases.</p>"},{"location":"config/#package-index","title":"Package index","text":"<p>The desired project name and version are configured with the <code>PYAPP_PROJECT_NAME</code> and <code>PYAPP_PROJECT_VERSION</code> options, respectively. The project name must adhere to PEP 508 and will be normalized during builds according to PEP 503.</p>"},{"location":"config/#dependency-file","title":"Dependency file","text":"<p>You may install your project using a dependency file with the <code>PYAPP_PROJECT_DEPENDENCY_FILE</code> option which should be a local path to the file. In this mode, the project name and version have nothing to do with installation and are just used as metadata.</p> <p>The following formats are supported:</p> Extensions Description <code>.txt</code><code>.in</code> This is the requirements file format"},{"location":"config/#project-embedding","title":"Embedding","text":"<p>You may embed the project with the <code>PYAPP_PROJECT_PATH</code> option which should be a path to a wheel ending in <code>.whl</code> or a source distribution ending in <code>.tar.gz</code>.</p> <p>Note</p> <p>The project name and version is automatically derived from the metadata files inside.</p>"},{"location":"config/#execution-mode","title":"Execution mode","text":"<p>The following options are mutually exclusive:</p> Option Description <code>PYAPP_EXEC_MODULE</code> This is the name of the module to execute via <code>python -m &lt;MODULE&gt;</code> <code>PYAPP_EXEC_SPEC</code> This is an object reference to execute e.g. <code>pkg.foo:cli</code> <code>PYAPP_EXEC_CODE</code> This is arbitrary code to run via <code>python -c &lt;CODE&gt;</code> (the spec option uses this internally) <code>PYAPP_EXEC_SCRIPT</code> This is a path to a script to embed in the binary and run <p>If none are set then the <code>PYAPP_EXEC_MODULE</code> option will default to the value of <code>PYAPP_PROJECT_NAME</code> with hyphens replaced by underscores.</p>"},{"location":"config/#python-distribution","title":"Python distribution","text":""},{"location":"config/#known","title":"Known","text":"<p>Setting the <code>PYAPP_PYTHON_VERSION</code> option will determine the distribution used at runtime based on the environment at build time. If unset then the default will be the latest stable minor version of CPython.</p>"},{"location":"config/#cpython","title":"CPython","text":"ID <code>3.7</code> <code>3.8</code> <code>3.9</code> <code>3.10</code> <code>3.11</code> <p>The source of distributions is the python-build-standalone project.</p> <p>Some distributions have variants that may be configured with the <code>PYAPP_DISTRIBUTION_VARIANT</code> option:</p> Platform Options Linux <ul><li><code>v1</code></li><li><code>v2</code></li><li><code>v3</code> (default)</li><li><code>v4</code></li></ul> Windows <ul><li><code>shared</code> (default)</li><li><code>static</code></li></ul>"},{"location":"config/#pypy","title":"PyPy","text":"ID <code>pypy2.7</code> <code>pypy3.9</code> <code>pypy3.10</code> <p>The source of distributions is the PyPy project.</p>"},{"location":"config/#custom","title":"Custom","text":"<p>You may explicitly set the <code>PYAPP_DISTRIBUTION_SOURCE</code> option which overrides the known distribution settings. The source must be a URL that points to an archived version of the desired Python distribution.</p> <p>Setting this manually may require you to define extra metadata about the distribution that is required for correct runtime behavior.</p>"},{"location":"config/#format","title":"Format","text":"<p>The following formats are supported for the <code>PYAPP_DISTRIBUTION_FORMAT</code> option, with the default chosen based on the ending of the source URL:</p> Format Extensions Description <code>tar|bzip2</code> <ul><li><code>.tar.bz2</code></li><li><code>.bz2</code></li></ul> A tar file with bzip2 compression <code>tar|gzip</code> <ul><li><code>.tar.gz</code></li><li><code>.tgz</code></li></ul> A tar file with gzip compression <code>tar|zstd</code> <ul><li><code>.tar.zst</code></li><li><code>.tar.zstd</code></li></ul> A tar file with Zstandard compression <code>zip</code> <ul><li><code>.zip</code></li></ul> A ZIP file with DEFLATE compression"},{"location":"config/#python-location","title":"Python location","text":"<p>You may set the relative path to the Python executable after unpacking the archive with the <code>PYAPP_DISTRIBUTION_PYTHON_PATH</code> option. The default is <code>python.exe</code> on Windows and <code>bin/python3</code> on all other platforms.</p>"},{"location":"config/#site-packages-location","title":"Site packages location","text":"<p>You may set the relative path to the <code>site-packages</code> directory after unpacking the archive with the <code>PYAPP_DISTRIBUTION_SITE_PACKAGES_PATH</code> option. The default is <code>Lib\\site-packages</code> on Windows and <code>lib/python&lt;ID&gt;/site-packages</code> on all other platforms where <code>&lt;ID&gt;</code> is the distribution ID is defined.</p>"},{"location":"config/#pip-availability","title":"pip availability","text":"<p>You may indicate whether pip is already installed by setting the <code>PYAPP_DISTRIBUTION_PIP_AVAILABLE</code> option to <code>true</code> or <code>1</code>. This elides the check for installation when upgraded virtual environments are enabled.</p>"},{"location":"config/#distribution-embedding","title":"Embedding","text":"<p>You may set the <code>PYAPP_DISTRIBUTION_EMBED</code> option to <code>true</code> or <code>1</code> to embed the distribution in the executable at build time to avoid fetching it at runtime. You can set the <code>PYAPP_DISTRIBUTION_PATH</code> option to use a local path rather than fetching the source, which implicitly enables embedding.</p>"},{"location":"config/#pip","title":"pip","text":"<p>These options have no effect when the project installation is disabled.</p>"},{"location":"config/#externally-managed","title":"Externally managed","text":"<p>You may set the <code>PYAPP_PIP_EXTERNAL</code> option to <code>true</code> or <code>1</code> to use the standalone versions of pip rather than whatever the distribution provides.</p> <p>By default, the latest version is used. You may use a specific <code>X.Y.Z</code> version by setting the <code>PYAPP_PIP_VERSION</code> option.</p> <p>Tip</p> <p>This provides a significant installation speed up when full isolation is not enabled.</p>"},{"location":"config/#extra-arguments","title":"Extra arguments","text":"<p>You may set the <code>PYAPP_PIP_EXTRA_ARGS</code> option to provide extra arguments to the <code>pip install</code> command at runtime when installing or updating the project e.g. <code>--only-binary :all: --index-url URL</code>.</p>"},{"location":"config/#allowing-configuration","title":"Allowing configuration","text":"<p>You may set the <code>PYAPP_PIP_ALLOW_CONFIG</code> option to <code>true</code> or <code>1</code> to allow the use of environment variables and other configuration at runtime.</p>"},{"location":"config/#full-isolation","title":"Full isolation","text":"<p>You may set the <code>PYAPP_FULL_ISOLATION</code> option to <code>true</code> or <code>1</code> to provide each installation with a full copy of the distribution rather than a virtual environment.</p>"},{"location":"config/#virtual-environments","title":"Virtual environments","text":"<p>When full isolation is not enabled, you may set the <code>PYAPP_UPGRADE_VIRTUALENV</code> option to <code>true</code> or <code>1</code> to create virtual environments with virtualenv rather than the standard library's <code>venv</code> module.</p>"},{"location":"config/#skipping-project-installation","title":"Skipping project installation","text":"<p>You may set the <code>PYAPP_SKIP_INSTALL</code> option to <code>true</code> or <code>1</code> to skip installing the project in the distribution. This allows for entirely predefined distributions and thus no network calls at runtime if used in conjunction with distribution embedding.</p>"},{"location":"config/#installation-indicator","title":"Installation indicator","text":"<p>The environment variable that is used for detection may be set to the path of the executable at runtime if you set the <code>PYAPP_PASS_LOCATION</code> option to <code>true</code> or <code>1</code>. This is useful if your application wishes to in some way manage itself.</p>"},{"location":"config/#management-command","title":"Management command","text":"<p>You may set the <code>PYAPP_SELF_COMMAND</code> option to override the default name (<code>self</code>) of the management command group. Setting this to <code>none</code> effectively disables the use of management commands.</p> <p>When enabled, the value will be available at runtime as the <code>PYAPP_COMMAND_NAME</code> environment variable.</p>"},{"location":"config/#metadata-template","title":"Metadata template","text":"<p>You may set a custom template used to output metadata with the <code>PYAPP_METADATA_TEMPLATE</code> option which supports the following placeholders:</p> Placeholder Description <code>{project}</code> The normalized project name <code>{version}</code> The currently installed version of the project <p>The default template is <code>{project} v{version}</code> if this option is unset.</p> <p>This is useful for setting custom commands for the Starship prompt. The following example configuration assumes that the built executable has been renamed to <code>foo</code>:</p> <pre><code>format = \"\"\"\n...\n${custom.foo}\\\n...\n$line_break\\\n...\n$character\"\"\"\n\n# &lt;clipped&gt;\n\n[custom.foo]\ncommand = \"foo self metadata\"\nwhen = true\n## Windows\n# shell = [\"cmd\", \"/C\"]\n## Other\n# shell = [\"sh\", \"--norc\"]\n</code></pre>"},{"location":"examples/","title":"Examples","text":"<p>The following examples do not illustrate every possible combination of options but rather some common use cases.</p>"},{"location":"examples/#single-project-basic","title":"Single project basic","text":"Option Value <code>PYAPP_PROJECT_NAME</code> <code>proj</code> <code>PYAPP_PROJECT_VERSION</code> <code>X.Y.Z</code>"},{"location":"examples/#single-project-embedded","title":"Single project embedded","text":"Option Value <code>PYAPP_PROJECT_PATH</code> <code>./proj-X.Y.Z.dev0-py3-none-any.whl</code>"},{"location":"examples/#dependency-file-basic","title":"Dependency file basic","text":"Option Value <code>PYAPP_PROJECT_NAME</code> <code>proj</code> <code>PYAPP_PROJECT_VERSION</code> <code>X.Y.Z</code> <code>PYAPP_PROJECT_DEPENDENCY_FILE</code> <code>./requirements.txt</code> <p>Note</p> <p>The default execution will be <code>python -m proj</code> at runtime.</p>"},{"location":"examples/#dependency-file-with-script","title":"Dependency file with script","text":"Option Value <code>PYAPP_PROJECT_NAME</code> <code>proj</code> <code>PYAPP_PROJECT_VERSION</code> <code>X.Y.Z</code> <code>PYAPP_PROJECT_DEPENDENCY_FILE</code> <code>./requirements.txt</code> <code>PYAPP_EXEC_SCRIPT</code> <code>./script.py</code>"},{"location":"examples/#execution-with-object-reference","title":"Execution with object reference","text":"Option Value <code>PYAPP_PROJECT_NAME</code> <code>proj</code> <code>PYAPP_PROJECT_VERSION</code> <code>X.Y.Z</code> <code>PYAPP_EXEC_SPEC</code> <code>proj.cli:main</code>"},{"location":"examples/#specific-known-distribution","title":"Specific known distribution","text":"Option Value <code>PYAPP_PROJECT_NAME</code> <code>proj</code> <code>PYAPP_PROJECT_VERSION</code> <code>X.Y.Z</code> <code>PYAPP_PYTHON_VERSION</code> <code>3.10</code>"},{"location":"examples/#custom-remote-distribution-basic","title":"Custom remote distribution basic","text":"Option Value <code>PYAPP_PROJECT_NAME</code> <code>proj</code> <code>PYAPP_PROJECT_VERSION</code> <code>X.Y.Z</code> <code>PYAPP_DISTRIBUTION_SOURCE</code> <code>https://foo.bar.baz/archive.tar.gz</code>"},{"location":"examples/#custom-remote-distribution-embedded","title":"Custom remote distribution embedded","text":"Option Value <code>PYAPP_PROJECT_NAME</code> <code>proj</code> <code>PYAPP_PROJECT_VERSION</code> <code>X.Y.Z</code> <code>PYAPP_DISTRIBUTION_SOURCE</code> <code>https://foo.bar.baz/archive.tar.gz</code> <code>PYAPP_DISTRIBUTION_EMBED</code> <code>true</code>"},{"location":"examples/#custom-embedded-local-distribution","title":"Custom embedded local distribution","text":"Option Value <code>PYAPP_PROJECT_NAME</code> <code>proj</code> <code>PYAPP_PROJECT_VERSION</code> <code>X.Y.Z</code> <code>PYAPP_DISTRIBUTION_PATH</code> <code>./archive.tar.gz</code>"},{"location":"examples/#offline-installation","title":"Offline installation","text":"Option Value <code>PYAPP_PROJECT_PATH</code> <code>./proj-X.Y.Z-py3-none-any.whl</code> <code>PYAPP_DISTRIBUTION_PATH</code> <code>./archive.tar.gz</code> <code>PYAPP_PIP_EXTRA_ARGS</code> <code>--no-deps</code>"},{"location":"examples/#reproducible-installation-with-custom-package-index","title":"Reproducible installation with custom package index","text":"Option Value <code>PYAPP_PROJECT_NAME</code> <code>proj</code> <code>PYAPP_PROJECT_VERSION</code> <code>X.Y.Z</code> <code>PYAPP_PROJECT_DEPENDENCY_FILE</code> <code>./requirements.txt</code> <code>PYAPP_PIP_EXTRA_ARGS</code> <code>--only-binary :all: --index-url URL</code>"},{"location":"runtime/","title":"Runtime behavior","text":""},{"location":"runtime/#initialization","title":"Initialization","text":"<p>Applications will bootstrap themselves on the first run. All subsequent invocations will only check if the installation directory exists and nothing else, to maximize CLI responsiveness.</p> <p>Note</p> <p>The following diagram shows the possible behavior at runtime. The nodes with rounded edges are conditions and those with jagged edges are actions.</p> <p>Most nodes are clickable and will take you to the relevant documentation.</p> <pre><code>flowchart TD\n    INSTALLED([Installed]) -- No --&gt; DISTCACHED([Distribution cached])\n    INSTALLED -- Yes --&gt; MNG([Management enabled])\n    DISTCACHED -- No --&gt; DISTEMBEDDED([Distribution embedded])\n    DISTCACHED -- Yes --&gt; FULLISOLATION([Full isolation])\n    DISTEMBEDDED -- No --&gt; DISTSOURCE[[Cache from source]]\n    DISTEMBEDDED -- Yes --&gt; DISTEXTRACT[[Cache from embedded data]]\n    DISTSOURCE --&gt; FULLISOLATION\n    DISTEXTRACT --&gt; FULLISOLATION\n    FULLISOLATION -- No --&gt; VENV[[Create virtual environment]]\n    FULLISOLATION -- Yes --&gt; UNPACK[[Unpack distribution directly]]\n    EXTERNALPIP([External pip]) -- No --&gt; PROJEMBEDDED([Project embedded])\n    EXTERNALPIP -- Yes --&gt; PIPCACHED([pip cached])\n    PIPCACHED -- No --&gt; DOWNLOADPIP[[Download pip]]\n    PIPCACHED -- Yes --&gt; PROJEMBEDDED([Project embedded])\n    DOWNLOADPIP --&gt; PROJEMBEDDED\n    PROJEMBEDDED -- No --&gt; DEPFILE([Dependency file])\n    PROJEMBEDDED -- Yes --&gt; PROJEMBED[[Install from embedded data]]\n    DEPFILE -- No --&gt; SINGLEPROJECT[[Install single project]]\n    DEPFILE -- Yes --&gt; DEPFILEINSTALL[[Install from dependency file]]\n    SINGLEPROJECT --&gt; MNG\n    DEPFILEINSTALL --&gt; MNG\n    PROJEMBED --&gt; MNG\n    VENV --&gt; EXTERNALPIP\n    UNPACK --&gt; EXTERNALPIP\n    MNG -- No --&gt; EXECUTE[[Execute project]]\n    MNG -- Yes --&gt; MNGCMD([Command invoked])\n    MNGCMD -- No --&gt; EXECUTE\n    MNGCMD -- Yes --&gt; MANAGE[[Run management command]]\n    click DISTEMBEDDED href \"../config/#distribution-embedding\"\n    click FULLISOLATION href \"../config/#full-isolation\"\n    click EXTERNALPIP href \"../config/#externally-managed\"\n    click PROJEMBEDDED href \"../config/#project-embedding\"\n    click DEPFILE href \"../config/#dependency-file\"\n    click SINGLEPROJECT href \"../config/#package-index\"\n    click DEPFILEINSTALL href \"../config/#dependency-file\"\n    click PROJEMBED href \"../config/#project-embedding\"\n    click MNG href \"../config/#management-command\"\n    click MNGCMD href \"../config/#management-command\"\n    click MANAGE href \"#commands\"\n    click EXECUTE href \"../config/#execution-mode\"</code></pre>"},{"location":"runtime/#execution","title":"Execution","text":"<p>Projects are executed using <code>execvp</code> on non-Windows systems, replacing the process.</p> <p>To provide consistent behavior on each user's machine:</p> <ul> <li>Python runs projects in isolated mode</li> <li>When installing or upgrading projects, pip uses isolation (by default)</li> </ul>"},{"location":"runtime/#detection","title":"Detection","text":"<p>A single environment variable called <code>PYAPP</code> is injected with the value of <code>1</code> (by default) when running applications and may be used to detect this mode of installation versus others.</p>"},{"location":"runtime/#location","title":"Location","text":"<p>The default location of your application's installation differs based on the operating system and can be overridden at runtime with the <code>PYAPP_INSTALL_DIR_&lt;PROJECT_NAME&gt;</code> environment variable where <code>&lt;PROJECT_NAME&gt;</code> is the uppercased version of the project name.</p>"},{"location":"runtime/#commands","title":"Commands","text":"<p>Built applications have a single top-level command group named <code>self</code> (by default) and all other invocations will be forwarded to your actual execution logic.</p>"},{"location":"runtime/#default","title":"Default","text":"<p>These commands are always exposed.</p>"},{"location":"runtime/#restore","title":"Restore","text":"<pre><code>&lt;EXE&gt; self restore\n</code></pre> <p>This will wipe the installation and start fresh.</p>"},{"location":"runtime/#update","title":"Update","text":"<pre><code>&lt;EXE&gt; self update\n</code></pre> <p>This will update the project to the latest available version in the currently used distribution.</p>"},{"location":"runtime/#optional","title":"Optional","text":"<p>These commands are hidden by default and each can be individually exposed by setting its corresponding <code>PYAPP_EXPOSE_&lt;COMMAND&gt;</code> option (e.g. <code>PYAPP_EXPOSE_METADATA</code>) to <code>true</code> or <code>1</code>.</p>"},{"location":"runtime/#metadata","title":"Metadata","text":"<pre><code>&lt;EXE&gt; self metadata\n</code></pre> <p>This displays customized output based on a template.</p>"},{"location":"runtime/#pip","title":"pip","text":"<pre><code>&lt;EXE&gt; self pip\n</code></pre> <p>This directly invokes pip with the installed Python.</p>"},{"location":"runtime/#python","title":"Python","text":"<pre><code>&lt;EXE&gt; self python\n</code></pre> <p>This directly invokes the installed Python.</p>"},{"location":"runtime/#python-path","title":"Python path","text":"<pre><code>&lt;EXE&gt; self python-path\n</code></pre> <p>This outputs the path to the installed Python.</p>"},{"location":"users/","title":"Users","text":"<p>The following is not intended to be a complete enumeration. Be sure to view the development version of this page for an up-to-date listing.</p>"},{"location":"users/#projects","title":"Projects","text":"<p>Datadog QA | Hatch</p>"}]}