{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"PyApp \u00b6 CI/CD Docs Project Meta PyApp is a wrapper for Python applications that bootstrap themselves at runtime. Features \u00b6 Easily build standalone binaries for every platform Optional management commands providing functionality such as self updates Extremely configurable runtime behavior allowing for targeting of different end users License \u00b6 PyApp is distributed under the terms of any of the following licenses: Apache-2.0 MIT Navigation \u00b6 Documentation for specific versions can be chosen by using the dropdown on the top of every page. The dev version reflects changes that have not yet been released. Desktop readers can use special keyboard shortcuts: Keys Action , (comma) p Navigate to the \"previous\" page . (period) n Navigate to the \"next\" page / s Display the search modal","title":"About"},{"location":"#pyapp","text":"CI/CD Docs Project Meta PyApp is a wrapper for Python applications that bootstrap themselves at runtime.","title":"PyApp"},{"location":"#features","text":"Easily build standalone binaries for every platform Optional management commands providing functionality such as self updates Extremely configurable runtime behavior allowing for targeting of different end users","title":"Features"},{"location":"#license","text":"PyApp is distributed under the terms of any of the following licenses: Apache-2.0 MIT","title":"License"},{"location":"#navigation","text":"Documentation for specific versions can be chosen by using the dropdown on the top of every page. The dev version reflects changes that have not yet been released. Desktop readers can use special keyboard shortcuts: Keys Action , (comma) p Navigate to the \"previous\" page . (period) n Navigate to the \"next\" page / s Display the search modal","title":"Navigation"},{"location":"build/","text":"Building \u00b6 Before building your application, you must configure your project at the very least. After you have done that, your application can be built using a local copy of this repository or via installation with Cargo. Tip For a more streamlined workflow, consider using the built-in app build target of Hatch . Local repository \u00b6 The recommended method of downloading the repository is via the source asset archives attached to each release . The latest release can always be downloaded at the following URLs: https://github.com/ofek/pyapp/releases/latest/download/source.tar.gz https://github.com/ofek/pyapp/releases/latest/download/source.zip Specific releases may be downloaded at the following URLs, replacing X.Y.Z with the desired version: https://github.com/ofek/pyapp/releases/download/vX.Y.Z/source.tar.gz https://github.com/ofek/pyapp/releases/download/vX.Y.Z/source.zip After unpacking the repository, enter the directory and run: cargo build --release The executable will be located at target/release/pyapp.exe if on Windows or target/release/pyapp otherwise. If a particular target has been set (or when cross compiling since one will always be set), then the release directory will be nested one level deeper under target/<TARGET> . Installation \u00b6 Select the directory in which to build the executable with the --root option and run: cargo install pyapp --force --root <DIR> The executable will be located at <DIR>/bin/pyapp.exe if on Windows or <DIR>/bin/pyapp otherwise. Specific versions may be chosen with the --version flag. Note: If you want to cross compile , this method of building is currently unsupported . Cross compilation \u00b6 Configuration for cross is validated by CI to ensure all known environment variable options are passed through to the containers. When embedding the project or the distribution using a local path, you must use the local repository way of building and ensure that the configured files to embed reside within the repository and the options refer to relative paths.","title":"Building"},{"location":"build/#building","text":"Before building your application, you must configure your project at the very least. After you have done that, your application can be built using a local copy of this repository or via installation with Cargo. Tip For a more streamlined workflow, consider using the built-in app build target of Hatch .","title":"Building"},{"location":"build/#local-repository","text":"The recommended method of downloading the repository is via the source asset archives attached to each release . The latest release can always be downloaded at the following URLs: https://github.com/ofek/pyapp/releases/latest/download/source.tar.gz https://github.com/ofek/pyapp/releases/latest/download/source.zip Specific releases may be downloaded at the following URLs, replacing X.Y.Z with the desired version: https://github.com/ofek/pyapp/releases/download/vX.Y.Z/source.tar.gz https://github.com/ofek/pyapp/releases/download/vX.Y.Z/source.zip After unpacking the repository, enter the directory and run: cargo build --release The executable will be located at target/release/pyapp.exe if on Windows or target/release/pyapp otherwise. If a particular target has been set (or when cross compiling since one will always be set), then the release directory will be nested one level deeper under target/<TARGET> .","title":"Local repository"},{"location":"build/#installation","text":"Select the directory in which to build the executable with the --root option and run: cargo install pyapp --force --root <DIR> The executable will be located at <DIR>/bin/pyapp.exe if on Windows or <DIR>/bin/pyapp otherwise. Specific versions may be chosen with the --version flag. Note: If you want to cross compile , this method of building is currently unsupported .","title":"Installation"},{"location":"build/#cross-compilation","text":"Configuration for cross is validated by CI to ensure all known environment variable options are passed through to the containers. When embedding the project or the distribution using a local path, you must use the local repository way of building and ensure that the configured files to embed reside within the repository and the options refer to relative paths.","title":"Cross compilation"},{"location":"config/","text":"Configuration \u00b6 All configuration is done with environment variables. Project \u00b6 There are 3 ways to configure runtime installation, none of which will occur when disabled . The project name and version must be known in all cases. Package index \u00b6 The desired project name and version are configured with the PYAPP_PROJECT_NAME and PYAPP_PROJECT_VERSION options, respectively. The project name must adhere to PEP 508 and will be normalized during builds according to PEP 503 . Dependency file \u00b6 You may install your project using a dependency file with the PYAPP_PROJECT_DEPENDENCY_FILE option which should be a local path to the file. In this mode, the project name and version have nothing to do with installation and are just used as metadata. The following formats are supported: Extensions Description .txt .in This is the requirements file format Embedding \u00b6 You may embed the project with the PYAPP_PROJECT_PATH option which should be a path to a wheel ending in .whl or a source distribution ending in .tar.gz . Note The project name and version is automatically derived from the metadata files inside. Execution mode \u00b6 The following options are mutually exclusive: Option Description PYAPP_EXEC_MODULE This is the name of the module to execute via python -m <MODULE> PYAPP_EXEC_SPEC This is an object reference to execute e.g. pkg.foo:cli PYAPP_EXEC_CODE This is arbitrary code to run via python -c <CODE> (the spec option uses this internally) If none are set then the PYAPP_EXEC_MODULE option will default to the value of PYAPP_PROJECT_NAME with hyphens replaced by underscores. Python distribution \u00b6 Known \u00b6 Setting the PYAPP_PYTHON_VERSION option will determine the distribution used at runtime based on the environment at build time. If unset then the default will be the latest stable minor version of CPython . CPython \u00b6 ID 3.7 3.8 3.9 3.10 3.11 The source of distributions is the python-build-standalone project. Some distributions have variants that may be configured with the PYAPP_DISTRIBUTION_VARIANT option: Platform Options Linux v1 v2 v3 (default) v4 Windows shared (default) static Custom \u00b6 You may explicitly set the PYAPP_DISTRIBUTION_SOURCE option which overrides the known distribution settings. The source must be a URL that points to an archived version of the desired Python distribution. Setting this manually may require you to define extra metadata about the distribution that is required for correct runtime behavior . Format \u00b6 The following formats are supported for the PYAPP_DISTRIBUTION_FORMAT option, with the default chosen based on the ending of the source URL: Format Extensions Description tar|gzip .tar.gz .tgz A tar file with gzip compression tar|zstd .tar.zst .tar.zstd A tar file with Zstandard compression zip .zip A ZIP file with DEFLATE compression Python location \u00b6 You may set the relative path to the Python executable after unpacking the archive with the PYAPP_DISTRIBUTION_PYTHON_PATH option. The default is python.exe on Windows and bin/python3 on all other platforms. Embedding \u00b6 You may set the PYAPP_DISTRIBUTION_EMBED option to true or 1 to embed the distribution in the executable at build time to avoid fetching it at runtime. When distribution embedding is enabled, you can set the PYAPP_DISTRIBUTION_PATH option to use a local path rather than fetching the source. pip \u00b6 These options have no effect when the project installation is disabled . Externally managed \u00b6 You may set the PYAPP_PIP_EXTERNAL option to true or 1 to use the standalone versions of pip rather than whatever the distribution provides. By default, the latest version is used. You may use a specific X.Y.Z version by setting the PYAPP_PIP_VERSION option. Tip This provides a significant installation speed up when full isolation is not enabled. Extra arguments \u00b6 You may set the PYAPP_PIP_EXTRA_ARGS option to provide extra arguments to the pip install command at runtime when installing or updating the project e.g. --index-url URL --only-binary :all: . Allowing configuration \u00b6 You may set the PYAPP_PIP_ALLOW_CONFIG option to true or 1 to allow the use of environment variables and other configuration at runtime. Isolation \u00b6 You may set the PYAPP_FULL_ISOLATION option to true or 1 to provide each installation with a full copy of the distribution rather than a virtual environment. Skipping project installation \u00b6 You may set the PYAPP_SKIP_INSTALL option to true or 1 to skip installing the project in the distribution. This allows for entirely predefined distributions and thus no network calls at runtime if used in conjunction with distribution embedding . Installation indicator \u00b6 The environment variable that is used for detection may be set to the path of the executable at runtime if you set the PYAPP_PASS_LOCATION option to true or 1 . This is useful if your application wishes to in some way manage itself. Management command \u00b6 You may set the PYAPP_SELF_COMMAND option to override the default name ( self ) of the management command group . Setting this to none effectively disables the use of management commands. When enabled, the value will be available at runtime as the PYAPP_COMMAND_NAME environment variable. Metadata template \u00b6 You may set a custom template used to output metadata with the PYAPP_METADATA_TEMPLATE option which supports the following placeholders: Placeholder Description {project} The normalized project name {version} The currently installed version of the project The default template is {project} v{version} if this option is unset. This is useful for setting custom commands for the Starship prompt. The following example configuration assumes that the built executable has been renamed to foo : format = \"\"\" ... ${custom.foo}\\ ... $line_break\\ ... $character\"\"\" # <clipped> [custom.foo] command = \"foo self metadata\" when = true ## Windows # shell = [\"cmd\", \"/C\"] ## Other # shell = [\"sh\", \"--norc\"]","title":"Configuration"},{"location":"config/#configuration","text":"All configuration is done with environment variables.","title":"Configuration"},{"location":"config/#project","text":"There are 3 ways to configure runtime installation, none of which will occur when disabled . The project name and version must be known in all cases.","title":"Project"},{"location":"config/#package-index","text":"The desired project name and version are configured with the PYAPP_PROJECT_NAME and PYAPP_PROJECT_VERSION options, respectively. The project name must adhere to PEP 508 and will be normalized during builds according to PEP 503 .","title":"Package index"},{"location":"config/#dependency-file","text":"You may install your project using a dependency file with the PYAPP_PROJECT_DEPENDENCY_FILE option which should be a local path to the file. In this mode, the project name and version have nothing to do with installation and are just used as metadata. The following formats are supported: Extensions Description .txt .in This is the requirements file format","title":"Dependency file"},{"location":"config/#project-embedding","text":"You may embed the project with the PYAPP_PROJECT_PATH option which should be a path to a wheel ending in .whl or a source distribution ending in .tar.gz . Note The project name and version is automatically derived from the metadata files inside.","title":"Embedding"},{"location":"config/#execution-mode","text":"The following options are mutually exclusive: Option Description PYAPP_EXEC_MODULE This is the name of the module to execute via python -m <MODULE> PYAPP_EXEC_SPEC This is an object reference to execute e.g. pkg.foo:cli PYAPP_EXEC_CODE This is arbitrary code to run via python -c <CODE> (the spec option uses this internally) If none are set then the PYAPP_EXEC_MODULE option will default to the value of PYAPP_PROJECT_NAME with hyphens replaced by underscores.","title":"Execution mode"},{"location":"config/#python-distribution","text":"","title":"Python distribution"},{"location":"config/#known","text":"Setting the PYAPP_PYTHON_VERSION option will determine the distribution used at runtime based on the environment at build time. If unset then the default will be the latest stable minor version of CPython .","title":"Known"},{"location":"config/#cpython","text":"ID 3.7 3.8 3.9 3.10 3.11 The source of distributions is the python-build-standalone project. Some distributions have variants that may be configured with the PYAPP_DISTRIBUTION_VARIANT option: Platform Options Linux v1 v2 v3 (default) v4 Windows shared (default) static","title":"CPython"},{"location":"config/#custom","text":"You may explicitly set the PYAPP_DISTRIBUTION_SOURCE option which overrides the known distribution settings. The source must be a URL that points to an archived version of the desired Python distribution. Setting this manually may require you to define extra metadata about the distribution that is required for correct runtime behavior .","title":"Custom"},{"location":"config/#format","text":"The following formats are supported for the PYAPP_DISTRIBUTION_FORMAT option, with the default chosen based on the ending of the source URL: Format Extensions Description tar|gzip .tar.gz .tgz A tar file with gzip compression tar|zstd .tar.zst .tar.zstd A tar file with Zstandard compression zip .zip A ZIP file with DEFLATE compression","title":"Format"},{"location":"config/#python-location","text":"You may set the relative path to the Python executable after unpacking the archive with the PYAPP_DISTRIBUTION_PYTHON_PATH option. The default is python.exe on Windows and bin/python3 on all other platforms.","title":"Python location"},{"location":"config/#distribution-embedding","text":"You may set the PYAPP_DISTRIBUTION_EMBED option to true or 1 to embed the distribution in the executable at build time to avoid fetching it at runtime. When distribution embedding is enabled, you can set the PYAPP_DISTRIBUTION_PATH option to use a local path rather than fetching the source.","title":"Embedding"},{"location":"config/#pip","text":"These options have no effect when the project installation is disabled .","title":"pip"},{"location":"config/#externally-managed","text":"You may set the PYAPP_PIP_EXTERNAL option to true or 1 to use the standalone versions of pip rather than whatever the distribution provides. By default, the latest version is used. You may use a specific X.Y.Z version by setting the PYAPP_PIP_VERSION option. Tip This provides a significant installation speed up when full isolation is not enabled.","title":"Externally managed"},{"location":"config/#extra-arguments","text":"You may set the PYAPP_PIP_EXTRA_ARGS option to provide extra arguments to the pip install command at runtime when installing or updating the project e.g. --index-url URL --only-binary :all: .","title":"Extra arguments"},{"location":"config/#allowing-configuration","text":"You may set the PYAPP_PIP_ALLOW_CONFIG option to true or 1 to allow the use of environment variables and other configuration at runtime.","title":"Allowing configuration"},{"location":"config/#isolation","text":"You may set the PYAPP_FULL_ISOLATION option to true or 1 to provide each installation with a full copy of the distribution rather than a virtual environment.","title":"Isolation"},{"location":"config/#skipping-project-installation","text":"You may set the PYAPP_SKIP_INSTALL option to true or 1 to skip installing the project in the distribution. This allows for entirely predefined distributions and thus no network calls at runtime if used in conjunction with distribution embedding .","title":"Skipping project installation"},{"location":"config/#installation-indicator","text":"The environment variable that is used for detection may be set to the path of the executable at runtime if you set the PYAPP_PASS_LOCATION option to true or 1 . This is useful if your application wishes to in some way manage itself.","title":"Installation indicator"},{"location":"config/#management-command","text":"You may set the PYAPP_SELF_COMMAND option to override the default name ( self ) of the management command group . Setting this to none effectively disables the use of management commands. When enabled, the value will be available at runtime as the PYAPP_COMMAND_NAME environment variable.","title":"Management command"},{"location":"config/#metadata-template","text":"You may set a custom template used to output metadata with the PYAPP_METADATA_TEMPLATE option which supports the following placeholders: Placeholder Description {project} The normalized project name {version} The currently installed version of the project The default template is {project} v{version} if this option is unset. This is useful for setting custom commands for the Starship prompt. The following example configuration assumes that the built executable has been renamed to foo : format = \"\"\" ... ${custom.foo}\\ ... $line_break\\ ... $character\"\"\" # <clipped> [custom.foo] command = \"foo self metadata\" when = true ## Windows # shell = [\"cmd\", \"/C\"] ## Other # shell = [\"sh\", \"--norc\"]","title":"Metadata template"},{"location":"runtime/","text":"Runtime behavior \u00b6 Initialization \u00b6 Applications will bootstrap themselves on the first run. All subsequent invocations will only check if the installation directory exists and nothing else, to maximize CLI responsiveness. flowchart TD INSTALLED([Installed]) -- No --> DISTCACHED([Distribution cached]) INSTALLED -- Yes --> MNG([Management enabled]) DISTCACHED -- No --> DISTEMBEDDED([Distribution embedded]) DISTCACHED -- Yes --> FULLISOLATION([Full isolation]) DISTEMBEDDED -- No --> DISTSOURCE[[Cache from source]] DISTEMBEDDED -- Yes --> DISTEXTRACT[[Cache from embedded data]] DISTSOURCE --> FULLISOLATION DISTEXTRACT --> FULLISOLATION FULLISOLATION -- No --> VENV[[Create virtual environment]] FULLISOLATION -- Yes --> UNPACK[[Unpack distribution directly]] EXTERNALPIP([External pip]) -- No --> PROJEMBEDDED([Project embedded]) EXTERNALPIP -- Yes --> PIPCACHED([pip cached]) PIPCACHED -- No --> DOWNLOADPIP[[Download pip]] PIPCACHED -- Yes --> PROJEMBEDDED([Project embedded]) DOWNLOADPIP --> PROJEMBEDDED PROJEMBEDDED -- No --> DEPFILE([Dependency file]) PROJEMBEDDED -- Yes --> PROJEMBED[[Install from embedded data]] DEPFILE -- No --> SINGLEPROJECT[[Install single project]] DEPFILE -- Yes --> DEPFILEINSTALL[[Install from dependency file]] SINGLEPROJECT --> MNG DEPFILEINSTALL --> MNG PROJEMBED --> MNG VENV --> EXTERNALPIP UNPACK --> EXTERNALPIP MNG -- No --> EXECUTE[[Execute project]] MNG -- Yes --> MNGCMD([Command invoked]) MNGCMD -- No --> EXECUTE MNGCMD -- Yes --> MANAGE[[Run management command]] Execution \u00b6 Projects are executed using execvp on non-Windows systems, replacing the process. To provide consistent behavior on each user's machine: Python runs projects in isolated mode When installing or upgrading projects, pip uses isolation ( by default ) Detection \u00b6 A single environment variable called PYAPP is injected with the value of 1 ( by default ) when running applications and may be used to detect this mode of installation versus others. Commands \u00b6 Built applications have a single top-level command group named self ( by default ) and all other invocations will be forwarded to your actual execution logic . Default \u00b6 These commands are always exposed. Restore \u00b6 <EXE> self restore This will wipe the installation and start fresh. Update \u00b6 <EXE> self update This will update the project to the latest available version in the currently used distribution. Optional \u00b6 These commands are hidden by default and each can be individually exposed by setting its corresponding PYAPP_EXPOSE_<COMMAND> option (e.g. PYAPP_EXPOSE_METADATA ) to true or 1 . Metadata \u00b6 <EXE> self metadata This displays customized output based on a template. Python \u00b6 <EXE> self python This directly invokes the installed Python.","title":"Runtime behavior"},{"location":"runtime/#runtime-behavior","text":"","title":"Runtime behavior"},{"location":"runtime/#initialization","text":"Applications will bootstrap themselves on the first run. All subsequent invocations will only check if the installation directory exists and nothing else, to maximize CLI responsiveness. flowchart TD INSTALLED([Installed]) -- No --> DISTCACHED([Distribution cached]) INSTALLED -- Yes --> MNG([Management enabled]) DISTCACHED -- No --> DISTEMBEDDED([Distribution embedded]) DISTCACHED -- Yes --> FULLISOLATION([Full isolation]) DISTEMBEDDED -- No --> DISTSOURCE[[Cache from source]] DISTEMBEDDED -- Yes --> DISTEXTRACT[[Cache from embedded data]] DISTSOURCE --> FULLISOLATION DISTEXTRACT --> FULLISOLATION FULLISOLATION -- No --> VENV[[Create virtual environment]] FULLISOLATION -- Yes --> UNPACK[[Unpack distribution directly]] EXTERNALPIP([External pip]) -- No --> PROJEMBEDDED([Project embedded]) EXTERNALPIP -- Yes --> PIPCACHED([pip cached]) PIPCACHED -- No --> DOWNLOADPIP[[Download pip]] PIPCACHED -- Yes --> PROJEMBEDDED([Project embedded]) DOWNLOADPIP --> PROJEMBEDDED PROJEMBEDDED -- No --> DEPFILE([Dependency file]) PROJEMBEDDED -- Yes --> PROJEMBED[[Install from embedded data]] DEPFILE -- No --> SINGLEPROJECT[[Install single project]] DEPFILE -- Yes --> DEPFILEINSTALL[[Install from dependency file]] SINGLEPROJECT --> MNG DEPFILEINSTALL --> MNG PROJEMBED --> MNG VENV --> EXTERNALPIP UNPACK --> EXTERNALPIP MNG -- No --> EXECUTE[[Execute project]] MNG -- Yes --> MNGCMD([Command invoked]) MNGCMD -- No --> EXECUTE MNGCMD -- Yes --> MANAGE[[Run management command]]","title":"Initialization"},{"location":"runtime/#execution","text":"Projects are executed using execvp on non-Windows systems, replacing the process. To provide consistent behavior on each user's machine: Python runs projects in isolated mode When installing or upgrading projects, pip uses isolation ( by default )","title":"Execution"},{"location":"runtime/#detection","text":"A single environment variable called PYAPP is injected with the value of 1 ( by default ) when running applications and may be used to detect this mode of installation versus others.","title":"Detection"},{"location":"runtime/#commands","text":"Built applications have a single top-level command group named self ( by default ) and all other invocations will be forwarded to your actual execution logic .","title":"Commands"},{"location":"runtime/#default","text":"These commands are always exposed.","title":"Default"},{"location":"runtime/#restore","text":"<EXE> self restore This will wipe the installation and start fresh.","title":"Restore"},{"location":"runtime/#update","text":"<EXE> self update This will update the project to the latest available version in the currently used distribution.","title":"Update"},{"location":"runtime/#optional","text":"These commands are hidden by default and each can be individually exposed by setting its corresponding PYAPP_EXPOSE_<COMMAND> option (e.g. PYAPP_EXPOSE_METADATA ) to true or 1 .","title":"Optional"},{"location":"runtime/#metadata","text":"<EXE> self metadata This displays customized output based on a template.","title":"Metadata"},{"location":"runtime/#python","text":"<EXE> self python This directly invokes the installed Python.","title":"Python"}]}